if status is-interactive
    # Commands to run in interactive sessions can go here

    # add to path
    #    set PATH /home/chad/.local/bin /home/chad/scripts /home/chad/.npm/bin /home/chad/.local/share/pnpm $N_PREFIX/bin $PATH

    # MY ABBREVIATIONS (expands on command line)
    # for copy and pasting to clipboard
    #abbr copy "xclip -selection c" # copy
    #abbr paste "xclip -selection c -o" # paste

end

function fish_greeting
  echo ""
  echo "    ▄▖    ▌   ▖ ▘      " | lolcat -r
  echo "    ▌▌▛▘▛▘▛▌  ▌ ▌▛▌▌▌▚▘" | lolcat -r
  echo "    ▛▌▌ ▙▖▌▌  ▙▖▌▌▌▙▌▞▖" | lolcat -r
  chafa ~/Pictures/chad.png --size=30
  figlet -f rustofat "Chad Boyce" | lolcat -r
  set -l cols (tput cols)
  seq 1 $cols | sort -R | spark | lolcat -r
end

# If you want to add the dirs to your PATH variable when using a login shell, add this to your ~/.config/fish/config.fish file: 
# source man fish-doc
if status --is-login
  set -gx PATH /home/chad/.local/bin /home/chad/scripts /home/chad/.npm/bin /home/chad/.local/share/pnpm $N_PREFIX/bin $PATH
end

#  SET GLOBAL VARIABLES

# tell sxhkd to use bash to do commands
set -U SXHKD_SHELL sh
set -xg N_PREFIX $HOME/chad/.n
set -xg COLORTERM truecolor
set -xg LC_TERMINAL ShellFish
set -xg NIX_LINK $HOME/.nix-profile

set -xg GOOGLE_API_KEY {{ .google_api_key }}
set -xg GOOGLE_SEARCH_ID {{ .google_search_id }} 
set -xg ROFI_SEARCH cse

set -xg SPOTIPY_CLIENT_ID {{ .spotipy_client_id }} 
set -xg SPOTIPY_CLIENT_SECRET {{ .spotipy_client_secret }} 
set -xg SPOTIPY_REDIRECT_URI {{ .spotipy_redirect_uri }} 

set -e EDITOR   # erases the variable so I can re-set it as glpbal variable in fish
set -xg EDITOR nvim  # sets the variable as global export
set -e VISUAL
set -xg VISUAL nvim  


### "bat" as manpager
set -x MANPAGER "sh -c 'col -bx | bat -l man -p'"

### SET EITHER DEFAULT EMACS MODE OR VI MODE ###
function fish_user_key_bindings
  fish_vi_key_bindings
end

### SPARK ###
set -g spark_version 1.0.0

complete -xc spark -n __fish_use_subcommand -a --help -d "Show usage help"
complete -xc spark -n __fish_use_subcommand -a --version -d "$spark_version"
complete -xc spark -n __fish_use_subcommand -a --min -d "Minimum range value"
complete -xc spark -n __fish_use_subcommand -a --max -d "Maximum range value"

function spark -d "sparkline generator"
    if isatty
        switch "$argv"
            case {,-}-v{ersion,}
                echo "spark version $spark_version"
            case {,-}-h{elp,}
                echo "usage: spark [--min=<n> --max=<n>] <numbers...>  Draw sparklines"
                echo "examples:"
                echo "       spark 1 2 3 4"
                echo "       seq 100 | sort -R | spark"
                echo "       awk \\\$0=length spark.fish | spark"
            case \*
                echo $argv | spark $argv
        end
        return
    end

    command awk -v FS="[[:space:],]*" -v argv="$argv" '
        BEGIN {
            min = match(argv, /--min=[0-9]+/) ? substr(argv, RSTART + 6, RLENGTH - 6) + 0 : ""
            max = match(argv, /--max=[0-9]+/) ? substr(argv, RSTART + 6, RLENGTH - 6) + 0 : ""
        }
        {
            for (i = j = 1; i <= NF; i++) {
                if ($i ~ /^--/) continue
                if ($i !~ /^-?[0-9]/) data[count + j++] = ""
                else {
                    v = data[count + j++] = int($i)
                    if (max == "" && min == "") max = min = v
                    if (max < v) max = v
                    if (min > v ) min = v
                }
            }
            count += j - 1
        }
        END {
            n = split(min == max && max ? "▅ ▅" : "▁ ▂ ▃ ▄ ▅ ▆ ▇ █", blocks, " ")
            scale = (scale = int(256 * (max - min) / (n - 1))) ? scale : 1
            for (i = 1; i <= count; i++)
                out = out (data[i] == "" ? " " : blocks[idx = int(256 * (data[i] - min) / scale) + 1])
            print out
        }
    '
end
### END OF SPARK ###

### FUNCTIONS ###
# Spark functions
function letters
    cat $argv | awk -vFS='' '{for(i=1;i<=NF;i++){ if($i~/[a-zA-Z]/) { w[tolower($i)]++} } }END{for(i in w) print i,w[i]}' | sort | cut -c 3- | spark | lolcat
    printf  '%s\n' 'abcdefghijklmnopqrstuvwxyz'  ' ' | lolcat
end

function commits
    git log --author="$argv" --format=format:%ad --date=short | uniq -c | awk '{print $1}' | spark | lolcat
end

# Functions needed for !! and !$
function __history_previous_command
  switch (commandline -t)
  case "!"
    commandline -t $history[1]; commandline -f repaint
  case "*"
    commandline -i !
  end
end

function __history_previous_command_arguments
  switch (commandline -t)
  case "!"
    commandline -t ""
    commandline -f history-token-search-backward
  case "*"
    commandline -i '$'
  end
end

# The bindings for !! and !$
if [ $fish_key_bindings = "fish_vi_key_bindings" ];
  bind -Minsert ! __history_previous_command
  bind -Minsert '$' __history_previous_command_arguments
else
  bind ! __history_previous_command
  bind '$' __history_previous_command_arguments
end
### END OF FUNCTIONS ###

### # my aliases
alias l=ls
alias lg=lazygit
alias cz=chezmoi
alias r=ranger
alias n=nnn
alias ta='tmux attach'
alias tanew='tmux new'
alias ag='ag --ignore ~/.ignore'

alias clear='echo -en "\x1b[2J\x1b[1;1H"'
# \x1b[2J   <- clears tty
# \x1b[1;1H <- goes to (1, 1) (start)
alias cls=clear

# navigation
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# Changing "ls" to "exa"
alias ls='exa -al --color=always --group-directories-first' # my preferred listing

#alias l='logo-ls -AS'
#alias ls='logo-ls -AS'
#alias la='logo-ls -AhS'  # all files and dirs
#alias ll='logo-ls -ASlh'  # long format
alias lt='exa -aT --color=always --group-directories-first' # tree listing
alias l.='exa -a | egrep "^\."'

# pacman and yay
#alias pacsyu='sudo pacman -Syyu'                 # update only standard pkgs
#alias yaysua='yay -Sua --noconfirm'              # update only AUR pkgs (yay)
#alias yaysyu='yay -Syu --noconfirm'              # update standard pkgs and AUR pkgs (yay)
#alias unlock='sudo rm /var/lib/pacman/db.lck'    # remove pacman lock
#alias cleanup='sudo pacman -Rns (pacman -Qtdq)'  # remove orphaned packages

# get fastest  AUR mirrors
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

# Colorize grep output (good for log files)
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# confirm before overwriting something
alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -i'

# adding flags
alias df='df -h'            # human-readable sizes

# git
alias addup='git add -u'
alias addall='git add .'
alias branch='git branch'
alias checkout='git checkout'
alias clone='git clone'
alias commit='git commit -m'
alias fetch='git fetch'
alias pull='git pull origin'
alias push='git push origin'
alias tag='git tag'
alias newtag='git tag -a'

# get error messages from journalctl
alias jctl="journalctl -p 3 -xb"

# gpg encryption
# verify signature for isos
alias gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
# receive the key of a developer
alias gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"

# youtube-dl
#alias yta-aac="youtube-dl --extract-audio --audio-format aac "
#alias yta-best="youtube-dl --extract-audio --audio-format best "
#alias yta-flac="youtube-dl --extract-audio --audio-format flac "
#alias yta-m4a="youtube-dl --extract-audio --audio-format m4a "
#alias yta-mp3="youtube-dl --extract-audio --audio-format mp3 "
#alias yta-opus="youtube-dl --extract-audio --audio-format opus "
#alias yta-vorbis="youtube-dl --extract-audio --audio-format vorbis "
#alias yta-wav="youtube-dl --extract-audio --audio-format wav "
#alias ytv-best="youtube-dl -f bestvideo+bestaudio "

# switch between shells
# I do not recommend switching default SHELL from bash.
#alias tobash="sudo chsh $USER -s /bin/bash && echo 'Now log out.'"
#alias tozsh="sudo chsh $USER -s /bin/zsh && echo 'Now log out.'"
#alias tofish="sudo chsh $USER -s /bin/fish && echo 'Now log out.'"

# bare git repo alias for dotfiles
# alias config="/usr/bin/git --git-dir=$HOME/dotfiles --work-tree=$HOME"

# termbin
alias tb="nc termbin.com 9999"

# the terminal rickroll
alias rr='curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash'

zoxide init fish | source
thefuck --alias | source
starship init fish | source
jump shell fish | source

function on_exit --on-event fish_exit
  echo fish is now exiting
end
